{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\anton\\\\react\\\\kenztv-web-app\\\\kenztv-app\\\\src\\\\components\\\\Authentication\\\\Accounts.js\";\nimport React, { createContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"./AwsUserPool\";\nconst AccountContext = /*#__PURE__*/createContext();\n\nconst Account = props => {\n  const getSession = async callback => {\n    await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n\n      if (user) {\n        user.getSession((err, session) => {\n          if (err) {\n            // reject()\n            if (callback) {\n              callback(err);\n            }\n          } else {\n            // resolve(session)\n            // resolve(\"Tony Said This\")\n            user.getUserAttributes((err, attributes) => {\n              if (err) {\n                if (callback) {\n                  callback(err);\n                }\n              } else if (attributes) {\n                if (callback) {\n                  const results = {};\n\n                  for (let attribute of attributes) {\n                    const {\n                      Name,\n                      Value\n                    } = attributes;\n                    results[Name] = Value;\n                  }\n\n                  callback(null, { ...session,\n                    ...results\n                  });\n                }\n              }\n\n              return;\n            });\n          }\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const authenticate = async (Username, Password, callback) => {\n    await new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log(\"onSuccess\", data); // resolve(\"data\")\n\n          if (callback) {\n            callback(null, data);\n          }\n        },\n        onFailure: err => {\n          console.error(\"onFailure\", err); // reject(err)\n\n          if (callback) {\n            callback(err);\n          }\n        },\n        newPasswordRequired: data => {\n          console.log(\"newPasswordRequired\", data); // resolve(data)\n\n          if (callback) {\n            callback(null, data);\n          }\n        }\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Account;\nexport { Account, AccountContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["C:/Users/anton/react/kenztv-web-app/kenztv-app/src/components/Authentication/Accounts.js"],"names":["React","createContext","CognitoUser","AuthenticationDetails","Pool","AccountContext","Account","props","getSession","callback","Promise","resolve","reject","user","getCurrentUser","err","session","getUserAttributes","attributes","results","attribute","Name","Value","authenticate","Username","Password","authDetails","authenticateUser","onSuccess","data","console","log","onFailure","error","newPasswordRequired","logout","signOut","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,qBAAtB,QAAmD,4BAAnD;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,MAAMC,cAAc,gBAAGJ,aAAa,EAApC;;AAEA,MAAMK,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAMC,UAAU,GAAG,MAAMC,QAAN,IAAkB;AACnC,UAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,YAAMC,IAAI,GAAGT,IAAI,CAACU,cAAL,EAAb;;AACA,UAAID,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACL,UAAL,CAAgB,CAACO,GAAD,EAAMC,OAAN,KAAkB;AAChC,cAAID,GAAJ,EAAS;AACP;AACA,gBAAIN,QAAJ,EAAc;AACZA,cAAAA,QAAQ,CAACM,GAAD,CAAR;AACD;AACF,WALD,MAKO;AACL;AACA;AAEAF,YAAAA,IAAI,CAACI,iBAAL,CAAuB,CAACF,GAAD,EAAMG,UAAN,KAAqB;AAC1C,kBAAIH,GAAJ,EAAS;AACP,oBAAIN,QAAJ,EAAc;AACZA,kBAAAA,QAAQ,CAACM,GAAD,CAAR;AACD;AACF,eAJD,MAIO,IAAIG,UAAJ,EAAgB;AACrB,oBAAIT,QAAJ,EAAc;AACZ,wBAAMU,OAAO,GAAG,EAAhB;;AACA,uBAAK,IAAIC,SAAT,IAAsBF,UAAtB,EAAkC;AAChC,0BAAM;AAAEG,sBAAAA,IAAF;AAAQC,sBAAAA;AAAR,wBAAkBJ,UAAxB;AACAC,oBAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBC,KAAhB;AACD;;AAEDb,kBAAAA,QAAQ,CAAC,IAAD,EAAO,EAAE,GAAGO,OAAL;AAAc,uBAAGG;AAAjB,mBAAP,CAAR;AACD;AACF;;AACD;AACD,aAjBD;AAkBD;AACF,SA7BD;AA8BD,OA/BD,MA+BO;AACLP,QAAAA,MAAM;AACP;AACF,KApCK,CAAN;AAqCD,GAtCD;;AAwCA,QAAMW,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BhB,QAA3B,KAAwC;AAC3D,UAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,YAAMC,IAAI,GAAG,IAAIX,WAAJ,CAAgB;AAC3BsB,QAAAA,QAD2B;AAE3BpB,QAAAA;AAF2B,OAAhB,CAAb;AAKA,YAAMsB,WAAW,GAAG,IAAIvB,qBAAJ,CAA0B;AAC5CqB,QAAAA,QAD4C;AAE5CC,QAAAA;AAF4C,OAA1B,CAApB;AAKAZ,MAAAA,IAAI,CAACc,gBAAL,CAAsBD,WAAtB,EAAmC;AACjCE,QAAAA,SAAS,EAAEC,IAAI,IAAI;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAzB,EADiB,CAEjB;;AACA,cAAIpB,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAAC,IAAD,EAAOoB,IAAP,CAAR;AACD;AACF,SAPgC;AASjCG,QAAAA,SAAS,EAAEjB,GAAG,IAAI;AAChBe,UAAAA,OAAO,CAACG,KAAR,CAAc,WAAd,EAA2BlB,GAA3B,EADgB,CAEhB;;AACA,cAAIN,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACM,GAAD,CAAR;AACD;AACF,SAfgC;AAiBjCmB,QAAAA,mBAAmB,EAAEL,IAAI,IAAI;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAnC,EAD2B,CAE3B;;AACA,cAAIpB,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAAC,IAAD,EAAOoB,IAAP,CAAR;AACD;AACF;AAvBgC,OAAnC;AAyBD,KApCK,CAAN;AAqCD,GAtCD;;AAwCA,QAAMM,MAAM,GAAG,MAAM;AACnB,UAAMtB,IAAI,GAAGT,IAAI,CAACU,cAAL,EAAb;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACuB,OAAL;AACD;AACF,GALD;;AAOA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEb,MAAAA,YAAF;AAAgBf,MAAAA,UAAhB;AAA4B2B,MAAAA;AAA5B,KAAhC;AAAA,cAAuE5B,KAAK,CAAC8B;AAA7E;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CA3FD;;KAAM/B,O;AA6FN,SAASA,OAAT,EAAkBD,cAAlB","sourcesContent":["import React, { createContext } from \"react\"\r\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\"\r\nimport Pool from \"./AwsUserPool\"\r\n\r\nconst AccountContext = createContext()\r\n\r\nconst Account = props => {\r\n  const getSession = async callback => {\r\n    await new Promise((resolve, reject) => {\r\n      const user = Pool.getCurrentUser()\r\n      if (user) {\r\n        user.getSession((err, session) => {\r\n          if (err) {\r\n            // reject()\r\n            if (callback) {\r\n              callback(err)\r\n            }\r\n          } else {\r\n            // resolve(session)\r\n            // resolve(\"Tony Said This\")\r\n\r\n            user.getUserAttributes((err, attributes) => {\r\n              if (err) {\r\n                if (callback) {\r\n                  callback(err)\r\n                }\r\n              } else if (attributes) {\r\n                if (callback) {\r\n                  const results = {}\r\n                  for (let attribute of attributes) {\r\n                    const { Name, Value } = attributes\r\n                    results[Name] = Value\r\n                  }\r\n\r\n                  callback(null, { ...session, ...results })\r\n                }\r\n              }\r\n              return\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        reject()\r\n      }\r\n    })\r\n  }\r\n\r\n  const authenticate = async (Username, Password, callback) => {\r\n    await new Promise((resolve, reject) => {\r\n      const user = new CognitoUser({\r\n        Username,\r\n        Pool,\r\n      })\r\n\r\n      const authDetails = new AuthenticationDetails({\r\n        Username,\r\n        Password,\r\n      })\r\n\r\n      user.authenticateUser(authDetails, {\r\n        onSuccess: data => {\r\n          console.log(\"onSuccess\", data)\r\n          // resolve(\"data\")\r\n          if (callback) {\r\n            callback(null, data)\r\n          }\r\n        },\r\n\r\n        onFailure: err => {\r\n          console.error(\"onFailure\", err)\r\n          // reject(err)\r\n          if (callback) {\r\n            callback(err)\r\n          }\r\n        },\r\n\r\n        newPasswordRequired: data => {\r\n          console.log(\"newPasswordRequired\", data)\r\n          // resolve(data)\r\n          if (callback) {\r\n            callback(null, data)\r\n          }\r\n        },\r\n      })\r\n    })\r\n  }\r\n\r\n  const logout = () => {\r\n    const user = Pool.getCurrentUser()\r\n    if (user) {\r\n      user.signOut()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AccountContext.Provider value={{ authenticate, getSession, logout }}>{props.children}</AccountContext.Provider>\r\n  )\r\n}\r\n\r\nexport { Account, AccountContext }\r\n"]},"metadata":{},"sourceType":"module"}